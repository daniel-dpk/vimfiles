# :vim:ft=snippets:
extends html

global !p
import re
def unCamel(camel):
	if len(camel) == 0:
		return ""
	elif len(camel) == 1:
		return camel.upper()
	else:
		return camel[0].upper() + re.sub('(.)([A-Z][a-z]+)',r'\1 \2',camel[1:])
endglobal


snippet echo "echo + newline" w
echo "${1:${VISUAL}}\\n";
endsnippet


snippet e "<?php echo $var?>" w
<?php echo ${1:${VISUAL:\$var}}?>
endsnippet

snippet php "Insert <?php ... ?>" w
<?php ${1:${VISUAL}} ?>
endsnippet

snippet PHP "Insert <?php ... ?> (3 lines)" b
<?php
${1:${VISUAL}}
?>
endsnippet

snippet HPH "Escape from php (?> ... <?php) (3 lines)" b
?>
${1:${VISUAL}}
<?php
endsnippet


snippet tr "<tr>$VISUAL</tr>" w
<tr>${1:${VISUAL}}</tr>
endsnippet

snippet TR "<tr><td>$VISUAL</td></tr> (3 lines)" b
<tr>
	<td>${1:${VISUAL}}</td>
</tr>
endsnippet

snippet td "<td>$VISUAL</td>" w
<td>${1:${VISUAL}}</td>
endsnippet

snippet TD "<td>$VISUAL</td> (3 lines)" b
<td>
	${1:${VISUAL}}
</td>
endsnippet

snippet etr "echo <tr> </tr> (2 lines)" b
echo '<tr>';
${1:${VISUAL}}
echo '</tr>';
endsnippet

snippet etd "echo <td> </td> (2 lines)" b
echo '<td>';
${1:${VISUAL}}
echo '</td>';
endsnippet


snippet c "<center>...</center>" w
<center>${1:${VISUAL}}</center>
endsnippet

snippet s "<span>...</span>" w
<span class="$1">${2:${VISUAL}}</span>
endsnippet


#=====================================#
#  Modifications of default snippets  #
#=====================================#

snippet arr "array(...)" w
array('${1}' => ${2})${0}
endsnippet

snippet ae "array element 'a' => 'b'" w
'${1:key}' => ${2:${VISUAL:\$val}}
endsnippet

snippet def "define(...)" !b
define('${VISUAL}${1}', ${2});${3}
endsnippet

snippet doc "Documentation for a function/class" b
/**
 * ${1:Brief Description}
 *
 * ${2:Long Description}
 */
endsnippet

snippet sdoc "Short Documentation for a function/class" b
/**
 * ${1:Brief Description}
 */
endsnippet

snippet doc_f "function (w/ documentation)" !b
/**
 * $2
 * @return ${4:void}
 * @author ${5:`!v g:snips_author`}
 */
${1:public }function ${2:someFunc}(${3}) {
	${VISUAL}${0}
}
endsnippet

snippet doc_i "interface (w/ documentation)" !b
/**
 * $1
 * @package ${2:default}
 * @author ${3:`!v g:snips_author`}
 */
interface ${1:someClass} {${4}
} // END interface $1
endsnippet

snippet foreachk "foreach key => value" !b
foreach ($${1:variable} as $${2:key} => $${3:value}) {
	${VISUAL}${0}
}
endsnippet

snippet forek "foreach key => value" !b
foreach ($${1:variable} as $${2:key} => $${3:value}) {
	${VISUAL}${0}
}
endsnippet

snippet fore "foreach value" !b
foreach ($${1:variable} as $${2:value}) {
	${VISUAL}${0}
}
endsnippet

snippet for "for loop" !
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${VISUAL}${4}
}
endsnippet


snippet if "if" !
if (${1}) {
	${VISUAL}${2}
}
endsnippet

snippet else "else" !
else {
	${VISUAL}${1}
}
endsnippet

snippet ife "if else" !
if (${1}) {
	${VISUAL}${2}
} else {
	${3}
}
endsnippet


snippet inc "include '...'" !
include '${1:file}';${2}
endsnippet

snippet req1 "require_once '...'" !
require_once '${1:file}';${2}
endsnippet

snippet log "error_log(var_export(...))" !
error_log(var_export(${1}, true));${2}
endsnippet

snippet t "ternery (val = condition ? a : b;)" !
$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

snippet getter "PHP Class Getter" !b
public function get${1/\w+\s*/\u$0/}() {
	return $this->_$1;$2
}
endsnippet

snippet setter "PHP Class Setter" !b
public function set${1/\w+\s*/\u$0/}($$1) {
	$this->_$1 = $$1;$3
	${4:return $this;}
}
endsnippet

snippet gs "PHP Class Getter & Setter" !b
private $_$1;

public function get${1/\w+\s*/\u$0/}() {
	return $this->_$1;$2
}
public function set${1/\w+\s*/\u$0/}($$1) {
	$this->_$1 = $$1;$3
	${4:return $this;}
}
endsnippet

snippet pub "Public function" !b
public function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}
endsnippet

snippet pro "Protected function" !b
protected function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}
endsnippet

snippet pri "Private function" !b
private function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}
endsnippet

snippet pubs "Public static function" !b
public static function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}
endsnippet

snippet pros "Protected static function" !b
protected static function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}
endsnippet

snippet pris "Private static function" !b
private static function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}
endsnippet

snippet fu "Function snip" !b
function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}
endsnippet


snippet new "New class instance" !b
$$1 = new ${2:${1/\w+\s*/\u$0/}}($3);
endsnippet


snippet class "Class declaration template" !b
/**
 * Class ${1:`!p snip.rv=snip.fn[0].upper()+snip.fn[1:].split('.')[0]`}
 * @author `!v g:snips_author`
 */
class $1 ${2:extends ${3:Parent} }{
	public function ${4:__construct}(${5:$options}) {$0
		parent::__construct($5);
	}
}
endsnippet

snippet pr "Dumb debug helper in HTML (<pre> print_r(...) </pre>)" !
echo '<pre>' . print_r(${1:"$2"}, 1) . '</pre>'; // @TODO: ...$0
endsnippet

snippet pc "Dumb debug helper in cli (print_r(...))" !
print_r($1);$0
endsnippet



#====================#
#  My own Additions  #
#====================#

snippet inst "create an instance of a singleton class MyClass::getInstance()" b
`!p snip.rv = ("$" if len(t[1]) else "")`${1:request}`!p snip.rv = (" = " if len(t[1]) else "")`${2:Request}::getInstance()`!p snip.rv = (";" if len(t[1]) else "->")`$3
endsnippet


snippet page "get a page object" !
`!p snip.rv = ("$" if len(t[1]) else "")`${1:page}`!p snip.rv = (" = " if len(t[1]) else "")`Page::getInstance()`!p snip.rv = (";" if len(t[1]) else "->")`
endsnippet

snippet user "get a user object for the currently logged in user (call it 'curUser' if ambiguous)" !
`!p snip.rv = ("$" if len(t[1]) else "")`${1:user}`!p snip.rv = (" = " if len(t[1]) else "")`LoginUserModel::getInstance()`!p snip.rv = (";" if len(t[1]) else "->")`
endsnippet

snippet user "get a user object for a specified user" b
$${1:user} = UserModel::getUser($${2:userID});
endsnippet

snippet db "get access to the dataBase object" !b
$${1:db} = Database::getInstance();
$$1->$0
endsnippet

snippet const "generate a constructor" !b
${1:public }function __construct(${2:$args}) {
	${3:parent::__construct($2);}$0
}
endsnippet

snippet layout "create a layout" !b
return $this->layout('${1:minimal}', array(
	'heading' => '${2:Heading}',
	'content' => ${3:new View('${4:index}')},
));
endsnippet

snippet try "Try-Catch block" !b
try {
	${VISUAL}$1
} catch (${2:Exception} $e) {
	${3:die ('Caught exception: ' . $e->getMessage());}
}
endsnippet

snippet switch "Switch statement" !b
switch ($${1:key}) {
	case ${2:'case1'}:
		${VISUAL}$5
	break;
	default:
		${3:throw new InvalidArgumentException(sprintf('${4:Case "%s" not defined.}',$$1));}
}
endsnippet

snippet case "Another case for a switch statement" !b
case ${1:'${2:the_case}'}:
	${VISUAL}$3
break;
endsnippet

snippet <<< "Heredoc string" !
<<<${1:SQL}
	${VISUAL}$2`!p snip.rv = "\n" + t[1] + ";"`
endsnippet


snippet singleton "Singleton class" !b
/**
 * Class ${1:`!p snip.rv=snip.fn[0].upper()+snip.fn[1:].split('.')[0]`}
 * @author `!v g:snips_author`
 */
class $1 ${2:extends ${3:BaseClass} }{
	private static /* $1 */ $_instance;
	private function __construct() {
	}
	public static function getInstance() {
		if (!isset(self::$_instance)) {
			self::$_instance = new $1();
		}
		return self::$_instance;
	}
}
endsnippet


snippet throw "Throws an exception" !b
throw new Exception('${1:an error occurred}');
endsnippet


#================#
#  MVC Snippets  #
#================#

snippet class_model "Model Class" !b
/**
 * Class ${1:`!p snip.rv=snip.fn[0].upper()+re.sub(r'Model$', '', snip.fn[1:].split('.')[0])`}Model
 * @author `!v g:snips_author`
 */
class $1Model extends ${2:BaseModel} {
	public function __construct() {
		parent::__construct();
	}$0
}
endsnippet


snippet class_ctrl "Simple MVC Controller Class (w/o form handling)" !b
/**
 * Class ${1:`!p snip.rv=snip.fn[0].upper()+re.sub(r'Ctrl$', '', snip.fn[1:].split('.')[0])`}Ctrl
 * @author `!v g:snips_author`
 */
class $1Ctrl extends ${2:BaseCtrl} {
	public function __construct($securityLevel = UserLevel::${3:Guest}) {
		parent::__construct($securityLevel);
	}

	public function indexAction($args=null) {
		$this->title(_('${4:$1}'));
		return $this->layout('minimal', array(
			'heading' => _('${5:$4}'),
			'content' => $this->index(),
		));
	}

	public function index($args=null) {
		$this->loadView('${1/\w+/\l$0/}');
		return $this->render();
	}
}
endsnippet

snippet class_ctrl "Complex MVC Controller Class w/ form handling (+ ajax)" b
/**
 * Class ${1:`!p snip.rv=snip.fn[0].upper()+re.sub(r'Ctrl$', '', snip.fn[1:].split('.')[0])`}Ctrl
 * @author `!v g:snips_author`
 */
class $1Ctrl extends ${2:BaseCtrl} {
	public function __construct($securityLevel = UserLevel::${3:Guest}) {
		parent::__construct($securityLevel);
	}

	public function indexAction($args=null) {
		$this->title(_('`!p snip.rv = unCamel(t[4])`'));
		return $this->layout('minimal', array(
			'heading' => _('`!p snip.rv = unCamel(t[4])`'),
			'content' => $this->index(),
		));
	}

	public function index($args=null) {
		$this->loadModel('$1Model');
		$this->loadView( '${1/\w+/\l$0/}');
		if ($this->request->isPost() && $this->request->hasPost('${4:formName}_submit')) {
			$this->$4Handler();
			unset($this->request->data['$4_submit']);
		}
		return $this->render();
	}

	public function $4Handler() {
		$model = $this->getModel();
		$doIt = $this->handlePostRequest_check('$4', $formData, $errors);
		$${5:result} = null;
		if ($doIt) {
			$$5 = $model->${6:doSomething}($${7:formData['someField']});
		}
		$this->handlePostRequest_respond('$4', $doIt, $formData, $errors, "${8:redirect/onSuccess/$$5}");
	}
}
endsnippet

snippet ctrl_action "Controller (form) action" !b
public function ${1:formName}Action($args=null) {
	// Generate content and get information required to build heading and title
	$content = $this->$1($args, $${2:info});

	// Set title and do the layouting.
	$this->title(`!p snip.rv = ('$'+t[2]+"['title']" if len(t[2]) else "'"+unCamel(t[1])+"'")`);
	return $this->layout('minimal', array(
		'heading' => `!p snip.rv = ("$"+t[2]+"['title']" if len(t[2]) else "'"+unCamel(t[1])+"'")`,
		'content' => $content,
	));
}

public function $1($args`!p snip.rv = (", &$"+t[2] if len(t[2]) else "")`) {
	$model = $this->loadModel('${3:${1/\w+/\u$0/}}Model');
	$view  = $this->loadView( '$1');
	$page  = Page::getInstance();

	// Validate arguments
	// TODO: ...
	if ($args != (int)$args) {
		$page->error('Invalid page requested!');
	}

	// Use $model to retrieve information (and possibly validate again).
	// TODO: ...
	$${4:data} = '...';

	// Handle form(s)
	if ($this->request->isPost() && $this->request->hasPost('$1_submit')) {
		$this->$1Handler(`!p snip.rv = ("$"+t[4] if len(t[4]) else "")`);
	}

	// Populate the view with data.
	// TODO: ...`!p
if len(t[4]):
	snip.reset_indent()
	snip.shift(2)
	snip.rv = "\n" + snip.mkline("$view->set('"+t[4]+"', $"+t[4]+");")
else:
	snip.rv = ""
`

	return $this->render();
}

public function $1Handler(`!p snip.rv = ("$"+t[4] if len(t[4]) else "")`) {
	$model = $this->getModel();
	$doIt = $this->handlePostRequest_check('$1', $formData, $errors);
	$${5:result} = null;
	if ($doIt) {
		$$5 = $model->${6:doSomething}($${7:formData['someField']});
	}
	unset($this->request->data['$1_submit']);
	$this->handlePostRequest_respond('$1', $doIt, $formData, $errors, "${8:redirect/onSuccess/$$5}");
}
endsnippet

snippet model_validator "Validator method for model" !b
public function validate${1:FormName}($items, &$complete) {
	$complete = array_keys_exist(array(${2:'${3:topic}','${4:message}'}), $items);
	$errors = array();
	foreach ($items as $key => $value) {
		$msg = '';
		switch ($key) {
			case '$3':
				if (!$this->_$3Allowed($value, $msg)) {
					$errors[$key] = $msg;
				}
				break;
			case '$4':
				if (!$this->_$4Allowed($value, $msg)) {
					$errors[$key] = $msg;
				}
				break;
			default:
				throw new InvalidArgumentException(sprintf('No validation for "%s" defined.',$key));
		}
	}
	return $errors;
}
endsnippet

snippet view_form "Generate a Form using the view's FormHelper" !b
$this->needHelper('Form');
$this->Form->create(array(
	'name'     => '${1:formName}',
	'errors'   => $this->get('formerrors',array()),
	'vertical' => ${2:false},
));
$this->Form->text(_('${3:Label}'), '${4:name}', array('autofocus' => true));
$this->Form->submit(_('${5:Button Label}'));
$this->Form->end();
endsnippet
