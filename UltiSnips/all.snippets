#==============#
#  NICE BOXES  #
#==============#

global !p
import string, vim

""" Maps a filetype to comment format used for boxes.
Automatically filled during usage"""
_commentDict = { }

def _parse_comments(s):
    """ Parses vim's comments option to extract comment format """
    i = iter(s.split(","))

    rv = []
    try:
        while True:
            # get the flags and text of a comment part
            flags,text = i.next().split(':', 1)

            if len(flags) == 0:
                if len(text) == 1:
                    rv.append((text,text,text, ""))
            # parse 3-part comment, but ignore those with O flag
            elif flags[0] == 's' and 'O' not in flags:
                ctriple = []
                indent = ""

                if flags[-1] in string.digits:
                    indent = " " * int(flags[-1])
                ctriple.append(text)

                flags,text = i.next().split(':', 1)
                assert(flags[0] == 'm')
                ctriple.append(text)

                flags,text = i.next().split(':', 1)
                assert(flags[0] == 'e')
                ctriple.append(text)
                ctriple.append(indent)

                rv.append(ctriple)

            elif flags[0] == 'b':
                if len(text) == 1:
                    rv.insert(0, (text,text,text, ""))

    except StopIteration:
       return rv

def _get_comment_format():
    """ Returns a 4-element tuple representing the comment format for
    the current file. """

    ft = vim.eval("&filetype")
    # check if the comment dict has the format for the current file
    if _commentDict.has_key(ft):
        return _commentDict[ft]

    # otherwise parse vim's comments and add it for later use
    commentformat = _parse_comments(vim.eval("&comments"))[0]
    _commentDict[ft] = commentformat

    return commentformat

def make_box_filler(twidth, filler, bwidth = None):
   if bwidth is None:
      bwidth = twidth + 2
   b,m,e,i = _get_comment_format()
   sline = b + (bwidth+2)*filler + e
   nspaces = (bwidth - twidth)//2
   mlines = b + " " + " "*nspaces
   mlinee = " " + " "*(bwidth-twidth-nspaces) + e
   eline = sline
   return sline, mlines, mlinee, eline
endglobal


snippet "^\s*box(.)" "A nice box with the current comment symbol (w/ custom filler)" r
`!p
box = make_box_filler(len(t[1]), match.group(1))
snip.rv = box[0] + '\n' + box[1]
`${1:${VISUAL}}`!p
box = make_box_filler(len(t[1]), match.group(1))
snip.rv = box[2] + '\n' + box[3]`
$0
endsnippet


snippet "^\s*bbox(.)" "A nice box over the full width (w/ custom filler)" r
`!p
box = make_box_filler(len(t[1]), match.group(1), 71)
snip.rv = box[0] + '\n' + box[1]
`${1:${VISUAL}}`!p
box = make_box_filler(len(t[1]), match.group(1), 71)
snip.rv = box[2] + '\n' + box[3]`
$0
endsnippet
