global !p
import re
def unCamel(camel):
	if len(camel) == 0:
		return ""
	elif len(camel) == 1:
		return camel.upper()
	else:
		result = camel[0].upper() + re.sub('(.)([A-Z][a-z])',r'\1 \2',camel[1:])
		result = re.sub('([a-z])([A-Z])',r'\1 \2',result)
		return result;
endglobal

snippet inc "#include <stdio>" b
#include <${1:iostream}>
endsnippet

snippet inch "#include 'foo.h'" b
#include "${1:foo}.h"
endsnippet

snippet incm "#include <maya/...>" b
#include <maya/${1:MGlobal}.h>
endsnippet

snippet ns "namespace { ... }" b
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	${VISUAL}$0
}${1/.+/ \/* namespace /m}$1${1/.+/ *\//m}
endsnippet


#snippet if "if (...) {code...}" !b
#if (${1}) {
#	${2:${VISUAL}}
#}
#endsnippet

priority 1

#snippet for "for loop" b
#for (${1:auto} ${2:i} = ${5:0}; $2 < ${3:count}; ++$2) {
#	${4:${VISUAL}}
#}
#endsnippet

snippet for "for loop" b
for (${1:auto} ${2:i} = ${3:0}; $2 < ${4:count}; ++$2) {
	${5:${VISUAL}}
}
endsnippet


#snippet fori "for iterator loop (self-made iterator)" b
#for (${1:iter}.reset(); !$1.isDone(); $1.next()) {
#	${2:${VISUAL}}
#}
#endsnippet


snippet fori "for iterator loop (std::iterator)" b
for (${1:it} = ${2:sequence}.begin(); $1 != $2.end(); ++$1) {
	${3:${VISUAL}}
}
endsnippet


snippet u "unsigned" w
unsigned $1
endsnippet


snippet fun "Function" b
/////////////////////////////////////////////////
${2:void} ${1:function_name}(${3:int arg1, int arg2}) {
	${4:${VISUAL}}
}
endsnippet


snippet enum "Simple enum" b
/*! \brief  ${4:TODO: Describe $1} */
enum ${1:EnumName} {
	${2:kFoo}, //!< $2 description.
	${3:kBar}  //!< $3 description.
};
endsnippet

snippet enum "Type-safe enum class (C++11)" b
enum class ${1:EnumName} {
	${2:foo}, //!< $2 description.
	${3:bar}, //!< $3 description.
};
endsnippet

snippet enum "Type-safe enum class for pre C++11 code" b
/////////////////////////////////////////////////
//! \brief  ${4:TODO: Describe $1}
/////////////////////////////////////////////////
struct ${1:ClassName} {
	enum Type {
		${2:foo}, //!< $2 description.
		${3:bar}  //!< $3 description.
	};
	$1(Type type) : fType(type) {}
	operator Type() const { return fType; }

private:
	Type fType;
	template <typename T> operator T() const; // no auto conversion of int, bool, ...
};
endsnippet


snippet class "class" b
/////////////////////////////////////////////////
//! \brief  ${5:TODO: Describe $1}
/////////////////////////////////////////////////
class ${1:ClassName} ${2:: public ${3:ParentClass} }{
public:
	virtual ~$1() = default;
	$1() = default;

private:
	${4:// Member variables}
};
endsnippet


snippet interface "interface (Scott Meyers)" b
/////////////////////////////////////////////////
//! \brief  ${3:TODO: Describe interface $1}
/////////////////////////////////////////////////
class ${1:InterfaceName} {
public:
	// The actual interface:
	virtual void ${2:some_function}(${3:args}) = 0;

	// Correct destruction of child via interface pointer using virtual
	// destructor. This disables (in turn) default move/copy, so we add them.
	virtual ~$1() = default;
	$1($1&&) = default; // 2 lines for moving
	$1& operator=($1&&) = default;
	$1(const $1&) = default; // 2 lines for copying
	$1& operator=(const $1&) = default;
};
endsnippet


snippet interface "interface (Non-Virtual-Interface, NVI)" b
/////////////////////////////////////////////////
//! \brief  ${3:TODO: Describe interface $1}
/////////////////////////////////////////////////
class ${1:InterfaceName} {
public:
	// non-virtual interface
	virtual void ${2:some_function}(${3:args}) { return do_$2($3); }

	// correct destruction of child via parent pointer
	virtual ~$1() = default;

private:
	// pure virtual implementation
	virtual void do_$2($3) = 0;
};
endsnippet


snippet singleton "singleton via static function variable" b
/////////////////////////////////////////////////
//! \brief  ${2:TODO: Describe $1}
/////////////////////////////////////////////////
class ${1:SingletonClass} {
private:
	$1() {}
	$1(const $1&);
	$1& operator=(const $1&);

public:
	static $1& getInstance() {
		static $1 theInstance;
		return theInstance;
	}
};
endsnippet


snippet singleton "singleton via pointer" b
/////////////////////////////////////////////////
//! \brief  ${2:TODO: Describe $1}
/////////////////////////////////////////////////
class ${1:SingletonClass} {
private:
	static $1* fInstance;
	$1() {}
	$1(const $1&);
	$1& operator=(const $1&);

public:
	static $1* getInstance() {
		if (fInstance == NULL) fInstance = new $1;
		return fInstance;
	}
};

// This goes into an implementation file:
$1* $1::fInstance = NULL;
endsnippet


snippet try "try {...} catch() {...}" b
try {
	${1:${VISUAL}}
} catch (const ${2:std::exception} &e) {
	std::cerr << "Error: " << e.what() << std::endl;
	return 1;
}
endsnippet
#snippet try "try {...} CATCH_MAYA_STAT" b
#try {
#	${1:${VISUAL}}
#} CATCH_MAYA_STAT;
#endsnippet


snippet CH "CHECKSTAT_THROW() macro" b
CHECKSTAT_THROW(${2:stat}, "${1:error message}");
endsnippet


snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r"[^A-Za-z0-9]+", "_", unCamel(snip.fn))
	snip.rv = name.upper()
else:
	snip.rv = snip.c`}
#define $1

${2:${VISUAL}}$0

#endif /* end of include guard: $1 */
endsnippet


snippet cout "cout << ... << endl;" b
std::cout << ${1:${VISUAL}} << std::endl;
endsnippet

snippet pv "cout << '>>> var = ' << var << ' <<<';" b
std::cout << ">>> ${1:${VISUAL}} = " << $1 << " <<<\n";
endsnippet

snippet p "cout << ...;" b
std::cout << "${1:${VISUAL}}\n";
endsnippet

snippet cerr "cerr << ... << endl;" b
std::cerr << ${1:${VISUAL}} << std::endl;
endsnippet

snippet " "interrupt string with a '<< ... <<'" i
" << ${1:${VISUAL}} << "
endsnippet


snippet switch "switch () {...}" b
switch (${1:determinant}) {
	case ${2:1}:
		${3:${VISUAL}}
		break;
	default:
		assert(0);
}
endsnippet

snippet case "case (inside a switch)" b
case ${1:1}:
	${2:${VISUAL}}
	break;
endsnippet


snippet DOC "Doxygen docs with @param and @return" b
//! \brief  ${1:${VISUAL:Short description.}}
//!
//! ${2:Long description.}
//!
//! @param ${3:foo}
//!     ${4:Describe $3.}
//!
//! @return ${5:Say what.}
endsnippet


snippet param "@param Doxygen tag" w
@param ${1:foo}
//!     ${2:Describe $1.}
endsnippet


snippet Doc "Function/Class Documentation for Doxygen" b
//! \brief  ${1:${VISUAL:Short description.}}
//!
//! ${2:Long description.}
endsnippet


snippet doc "Compact brief and long documentation for Doxygen" b
/*! \brief  ${1:${VISUAL:Short description.}} */
//! ${2:Long description.}
endsnippet

snippet sdoc "Brief documentation for Doxygen" b
/*! \brief  ${1:${VISUAL:Short description.}} */
endsnippet


snippet tmp "TMP TMP TMP block" b
// TODO: TMP TMP TMP {
${1:${VISUAL}}
// TODO: } TMP TMP TMP
endsnippet


snippet "(?<=\S\s)doc\b" "Member documentation in same line" r
//!< ${1:${VISUAL:Short description.}}
endsnippet


snippet "\/\/! [Ee]x\b" "Code example in Doxygen comment" r
//! Example:
//! ~~~
//! ${1:${VISUAL:code}}
//! ~~~
endsnippet


snippet test "Unit Testing: Basic .cpp structure" b
#include "catch.hpp"

#include "${1:`!p
if not snip.c:
	import string
	snip.rv = re.sub(r'test_$', '', snip.basename)
else:
	snip.rv = snip.c`}.h"


TEST_CASE("${2:Testing $1}", "${3:[tags]}") {
	${4:${VISUAL:...}}
}
endsnippet


snippet T "Unit Testing: TEST_CASE" b
TEST_CASE("${1:Unique name}", "${2:[tags]}") {
	${3:${VISUAL:...}}
}
endsnippet


snippet S "Unit Testing: SECTION" b
SECTION("${1:Section name}") {
	${2:${VISUAL:...}}
}
endsnippet


snippet R "Unit Testing: REQUIRE macro" b
REQUIRE(${1:${2:1} == ${3:2}});
endsnippet


snippet C "CAPTURE() value of any expression" b
CAPTURE($1);
endsnippet


snippet addFlag "Add a flag to the MSyntax object" b
syntax.addFlag(flag${1:Name}, flag$1Long, ${2:MSyntax::kString});
endsnippet
